buildscript {
	repositories {
		jcenter()
		maven { url 'https://jitpack.io' }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath 'com.github.eriwen:gradle-css-plugin:9fe88d7126'
		classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
		classpath 'edu.sc.seis.launch4j:launch4j:2.4.9'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'css'
apply plugin: 'edu.sc.seis.launch4j'

group 'net.querz.mcaselector'
version '1.14.3'
def appName = 'MCA Selector'
def appUrl = 'https://github.com/Querz/mcaselector'
def appAuthor = 'Querz'

sourceCompatibility = 1.8

idea {
	module.downloadSources = true
}

repositories {
	mavenCentral()
	maven {
		url 'https://jitpack.io/'
	}
}

dependencies {
	implementation 'com.github.Querz:NBT:4192a95c9d'
	implementation 'org.json:json:20201115'
	implementation 'ar.com.hjg:pngj:2.1.0'
	testImplementation 'junit:junit:4.12'
	testImplementation 'commons-io:commons-io:2.6'
}

jar {
	archiveFileName = "${project.name}-${project.version}-min.jar"
	manifest.attributes 'Main-Class': 'net.querz.mcaselector.Main', 'Application-Version': project.version
	from 'LICENSE'
}

shadowJar {
	minimize()
	archiveFileName = "${project.name}-${project.version}.jar"
	project.configurations.implementation.canBeResolved = true
	configurations = [project.configurations.implementation]
	exclude 'LICENSE.txt', 'NOTICE.txt'
	from 'LICENSE'
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

minifyCss {
	source = "${sourceSets.main.resources.srcDirs[0]}/style.css"
	dest = "${sourceSets.main.output.resourcesDir}/style.css"
}

createExe {
	dontWrapJar true
	jar "${project.name}.jar"
	outfile "${appName}.exe"
	icon "${rootProject.projectDir}/inno/icon.ico"
	bundledJrePath 'jre'
	jvmOptions ['-Xmx8G']
}

task installer {
	doLast {
		def innoSetupDir = new File("${buildDir}/inno")

		delete innoSetupDir
		innoSetupDir.mkdir()

		copy {
			from("${rootProject.projectDir}/inno/icon.ico")
			from("${rootProject.projectDir}/inno/small.bmp")
			from("${rootProject.projectDir}/inno/large.bmp")
			from("${buildDir}/libs/${project.name}-${project.version}.jar")
			from("${buildDir}/launch4j/${appName}.exe")
			from("${rootProject.projectDir}/LICENSE")
			from("${rootProject.projectDir}/7za.exe")
			into(innoSetupDir)
			rename("${project.name}-${project.version}.jar", "${project.name}.jar")
		}

		copy {
			from("${rootProject.projectDir}/inno/inno.iss")
			expand([
					applicationVersion: project.version,
					applicationName: appName,
					applicationUrl: appUrl,
					applicationAuthor: appAuthor,
					applicationJar: "${project.name}.jar"
			])
			into(innoSetupDir)
		}
	}
}

jar.finalizedBy shadowJar
jar.dependsOn minifyCss
assemble.dependsOn shadowJar

task updateReadme {
	doLast {
		ant.replaceregexp(
				match: '(?:Download Version )\\d+\\.\\d+(?:\\.\\d+)?',
				replace: "Download Version ${version}",
				flags: 'g',
				byline: true) {
			fileset dir: '.', includes: 'README.md'
		}
		ant.replaceregexp(
				match: '(?:download/)\\d+\\.\\d+(?:\\.\\d+)?',
				replace: "download/${version}",
				flags: 'g',
				byline: true) {
			fileset dir: '.', includes: 'README.md'
		}
		ant.replaceregexp(
				match: '(?:mcaselector-)\\d+\\.\\d+(?:\\.\\d+)?',
				replace: "mcaselector-${version}",
				flags: 'g',
				byline: true) {
			fileset dir: '.', includes: 'README.md'
		}
		ant.replaceregexp(
				match: '<!--toc-start-->[\\s\\S]*<!--toc-end-->',
				replace: createTOC('README.md', '<!--toc-start-->', '<!--toc-end-->', true, true),
				flags: 'g') {
			fileset dir: '.', includes: 'README.md'
		}
	}
}

// ---------------------------------------------------------------------------------------------------------------------

/**
 * Creates a Table Of Contents from headings in a markdown file.
 *
 * @param f  The file to be checked for headings
 * @param st The prefix to the TOC
 * @param en The suffix of the TOC
 * @param it Whether to ignore the title
 * @param is Whether to ignore the subtitle: a subtitle is a level 4 heading prefixed by ####
 * @return   The TOC as a string with prefix and suffix
 * @throws IOException If the input file could not be read
 * @throws IllegalArgumentException If the input file is not a file
 */
static String createTOC(String f, String st, String en, boolean it, boolean is) throws IOException {
	File e = new File(f).getAbsoluteFile()
	if (!e.isFile())
		throw new IllegalArgumentException('file doesn\'t exist or is not a file')
	StringBuilder b = new StringBuilder(st + '\n' as String)
	int l, s = 0
	BufferedReader br = new BufferedReader(new FileReader(e))
	try {
		for (String n in br.lines()) {
			String t
			if ((t = n.trim()).startsWith('#')) {
				for (l = 0; l < t.length() && t.charAt(l) == '#' as char; l++) {/**/
				}
				s += l == 4 ? 1 : 0
				if (t.length() == l || t.charAt(l) != ' ' as char || it && l == 1 || is && l == 4 && s == 1)
					continue
				for (int i = it ? 2 : 1; i < l; i++)
					b.append('  ')
				String x = t.substring(l + 1)
				String k = x.toLowerCase().replaceAll('[^a-z0-9 \\-_]', '').replace(' ', '-')
				b.append('* [').append(x).append('](#').append(k).append(')\n')
			}
		}
	} finally {
		br.close()
	}
	return b.append(en).toString()
}